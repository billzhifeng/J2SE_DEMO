/**
     * ArrayBlockingQueue由于其底层基于数组，并且在创建时指定存储的大小，<br/>
     * 在完成后就会立即在内存分配固定大小容量的数组元素，因此其存储通常有限，<br/>
     * 故其是一个“有界“的阻塞队列；
     
     而LinkedBlockingQueue可以由用户指定最大存储容量，也可以无需指定，<br/>
     * 如果不指定则最大存储容量将是Integer.MAX_VALUE，即可以看作是一个“无界”的阻塞队列，<br/>
     * 由于其节点的创建都是动态创建，并且在节点出队列后可以被GC所回收，因此其具有灵活的伸缩性。<br/>
     * 
     
     但是由于ArrayBlockingQueue的有界性，因此其能够更好的对于性能进行预测，<br/>
     * 而LinkedBlockingQueue由于没有限制大小，<br/>
     * 当任务非常多的时候，不停地向队列中存储，就有可能导致内存溢出的情况发生。
     
     
     * 其次，ArrayBlockingQueue中在入队列和出队列操作过程中，使用的是同一个lock，<br/>
     * 所以即使在多核CPU的情况下，其读取和操作的都无法做到并行，<br/>
     
     
     * 而LinkedBlockingQueue的读取和插入操作所使用的锁是两个不同的lock，它们之间的操作互相不受干扰，<br/>
     * 因此两种操作可以并行完成，故LinkedBlockingQueue的吞吐量要高于ArrayBlockingQueue。
     */

    /**
     * 下面的代码是Executors创建固定大小线程池的代码，其使用了 LinkedBlockingQueue来作为任务队列。
     */
    //    public static ExecutorService newFixedThreadPool(int nThreads) {
    //        return new ThreadPoolExecutor(nThreads, nThreads,
    //                                      0L, TimeUnit.MILLISECONDS,
    //                                      new LinkedBlockingQueue<Runnable>());
    //    }

    /*
     * JDK中选用LinkedBlockingQueue作为阻塞队列的原因就在于其无界性。因为线程大小固定的线程池，其线程的数量是不具备伸缩性的，
     * 当任务非常繁忙的时候，就势必会导致所有的线程都处于工作状态，如果使用一个有界的阻塞队列来进行处理，<br/>
     * 那么就非常有可能很快导致队列满的情况发生，
     * 从而导致任务无法提交而抛出RejectedExecutionException，
     而使用无界队列由于其良好的存储容量的伸缩性，<br/>
     * 可以很好的去缓冲任务繁忙情况下场景，即使任务非常多，也可以进行动态扩容，
     当任务被处理完成之后，队列中的节点也会被随之被GC回收，非常灵活。
     */